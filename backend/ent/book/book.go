// Code generated by entc, DO NOT EDIT.

package book

import (
	"time"
)

const (
	// Label holds the string label denoting the book type in the database.
	Label = "book"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldCreateAt holds the string denoting the create_at field in the database.
	FieldCreateAt = "create_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldSubject holds the string denoting the subject field in the database.
	FieldSubject = "subject"
	// EdgeUnitid holds the string denoting the unitid edge name in mutations.
	EdgeUnitid = "unitid"
	// EdgeUserid holds the string denoting the userid edge name in mutations.
	EdgeUserid = "userid"
	// Table holds the table name of the book in the database.
	Table = "books"
	// UnitidTable is the table that holds the unitid relation/edge.
	UnitidTable = "books"
	// UnitidInverseTable is the table name for the Unit entity.
	// It exists in this package in order to avoid circular dependency with the "unit" package.
	UnitidInverseTable = "units"
	// UnitidColumn is the table column denoting the unitid relation/edge.
	UnitidColumn = "unit_contents"
	// UseridTable is the table that holds the userid relation/edge.
	UseridTable = "books"
	// UseridInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UseridInverseTable = "users"
	// UseridColumn is the table column denoting the userid relation/edge.
	UseridColumn = "user_writer"
)

// Columns holds all SQL columns for book fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldCreateAt,
	FieldUpdatedAt,
	FieldSubject,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "books"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"unit_contents",
	"user_writer",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultTitle holds the default value on creation for the "title" field.
	DefaultTitle string
	// DefaultCreateAt holds the default value on creation for the "create_at" field.
	DefaultCreateAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultSubject holds the default value on creation for the "subject" field.
	DefaultSubject string
)
