// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/backand/ent/book"
	"github.com/backand/ent/predicate"
	"github.com/backand/ent/unit"
)

// UnitUpdate is the builder for updating Unit entities.
type UnitUpdate struct {
	config
	hooks    []Hook
	mutation *UnitMutation
}

// Where appends a list predicates to the UnitUpdate builder.
func (uu *UnitUpdate) Where(ps ...predicate.Unit) *UnitUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetContent sets the "content" field.
func (uu *UnitUpdate) SetContent(s string) *UnitUpdate {
	uu.mutation.SetContent(s)
	return uu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (uu *UnitUpdate) SetNillableContent(s *string) *UnitUpdate {
	if s != nil {
		uu.SetContent(*s)
	}
	return uu
}

// SetContentName sets the "content_name" field.
func (uu *UnitUpdate) SetContentName(s string) *UnitUpdate {
	uu.mutation.SetContentName(s)
	return uu
}

// SetNillableContentName sets the "content_name" field if the given value is not nil.
func (uu *UnitUpdate) SetNillableContentName(s *string) *UnitUpdate {
	if s != nil {
		uu.SetContentName(*s)
	}
	return uu
}

// AddContentIDs adds the "contents" edge to the Book entity by IDs.
func (uu *UnitUpdate) AddContentIDs(ids ...int) *UnitUpdate {
	uu.mutation.AddContentIDs(ids...)
	return uu
}

// AddContents adds the "contents" edges to the Book entity.
func (uu *UnitUpdate) AddContents(b ...*Book) *UnitUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uu.AddContentIDs(ids...)
}

// Mutation returns the UnitMutation object of the builder.
func (uu *UnitUpdate) Mutation() *UnitMutation {
	return uu.mutation
}

// ClearContents clears all "contents" edges to the Book entity.
func (uu *UnitUpdate) ClearContents() *UnitUpdate {
	uu.mutation.ClearContents()
	return uu
}

// RemoveContentIDs removes the "contents" edge to Book entities by IDs.
func (uu *UnitUpdate) RemoveContentIDs(ids ...int) *UnitUpdate {
	uu.mutation.RemoveContentIDs(ids...)
	return uu
}

// RemoveContents removes "contents" edges to Book entities.
func (uu *UnitUpdate) RemoveContents(b ...*Book) *UnitUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uu.RemoveContentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UnitUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(uu.hooks) == 0 {
		affected, err = uu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UnitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uu.mutation = mutation
			affected, err = uu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uu.hooks) - 1; i >= 0; i-- {
			if uu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UnitUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UnitUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UnitUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UnitUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   unit.Table,
			Columns: unit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: unit.FieldID,
			},
		},
	}
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: unit.FieldContent,
		})
	}
	if value, ok := uu.mutation.ContentName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: unit.FieldContentName,
		})
	}
	if uu.mutation.ContentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   unit.ContentsTable,
			Columns: []string{unit.ContentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: book.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedContentsIDs(); len(nodes) > 0 && !uu.mutation.ContentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   unit.ContentsTable,
			Columns: []string{unit.ContentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: book.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ContentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   unit.ContentsTable,
			Columns: []string{unit.ContentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: book.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{unit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// UnitUpdateOne is the builder for updating a single Unit entity.
type UnitUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UnitMutation
}

// SetContent sets the "content" field.
func (uuo *UnitUpdateOne) SetContent(s string) *UnitUpdateOne {
	uuo.mutation.SetContent(s)
	return uuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (uuo *UnitUpdateOne) SetNillableContent(s *string) *UnitUpdateOne {
	if s != nil {
		uuo.SetContent(*s)
	}
	return uuo
}

// SetContentName sets the "content_name" field.
func (uuo *UnitUpdateOne) SetContentName(s string) *UnitUpdateOne {
	uuo.mutation.SetContentName(s)
	return uuo
}

// SetNillableContentName sets the "content_name" field if the given value is not nil.
func (uuo *UnitUpdateOne) SetNillableContentName(s *string) *UnitUpdateOne {
	if s != nil {
		uuo.SetContentName(*s)
	}
	return uuo
}

// AddContentIDs adds the "contents" edge to the Book entity by IDs.
func (uuo *UnitUpdateOne) AddContentIDs(ids ...int) *UnitUpdateOne {
	uuo.mutation.AddContentIDs(ids...)
	return uuo
}

// AddContents adds the "contents" edges to the Book entity.
func (uuo *UnitUpdateOne) AddContents(b ...*Book) *UnitUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uuo.AddContentIDs(ids...)
}

// Mutation returns the UnitMutation object of the builder.
func (uuo *UnitUpdateOne) Mutation() *UnitMutation {
	return uuo.mutation
}

// ClearContents clears all "contents" edges to the Book entity.
func (uuo *UnitUpdateOne) ClearContents() *UnitUpdateOne {
	uuo.mutation.ClearContents()
	return uuo
}

// RemoveContentIDs removes the "contents" edge to Book entities by IDs.
func (uuo *UnitUpdateOne) RemoveContentIDs(ids ...int) *UnitUpdateOne {
	uuo.mutation.RemoveContentIDs(ids...)
	return uuo
}

// RemoveContents removes "contents" edges to Book entities.
func (uuo *UnitUpdateOne) RemoveContents(b ...*Book) *UnitUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uuo.RemoveContentIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UnitUpdateOne) Select(field string, fields ...string) *UnitUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated Unit entity.
func (uuo *UnitUpdateOne) Save(ctx context.Context) (*Unit, error) {
	var (
		err  error
		node *Unit
	)
	if len(uuo.hooks) == 0 {
		node, err = uuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UnitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uuo.mutation = mutation
			node, err = uuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uuo.hooks) - 1; i >= 0; i-- {
			if uuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UnitUpdateOne) SaveX(ctx context.Context) *Unit {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UnitUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UnitUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UnitUpdateOne) sqlSave(ctx context.Context) (_node *Unit, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   unit.Table,
			Columns: unit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: unit.FieldID,
			},
		},
	}
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Unit.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, unit.FieldID)
		for _, f := range fields {
			if !unit.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != unit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: unit.FieldContent,
		})
	}
	if value, ok := uuo.mutation.ContentName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: unit.FieldContentName,
		})
	}
	if uuo.mutation.ContentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   unit.ContentsTable,
			Columns: []string{unit.ContentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: book.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedContentsIDs(); len(nodes) > 0 && !uuo.mutation.ContentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   unit.ContentsTable,
			Columns: []string{unit.ContentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: book.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ContentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   unit.ContentsTable,
			Columns: []string{unit.ContentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: book.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Unit{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{unit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
