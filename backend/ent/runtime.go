// Code generated by entc, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/backand/ent/book"
	"github.com/backand/ent/schema"
	"github.com/backand/ent/unit"
	"github.com/backand/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	bookFields := schema.Book{}.Fields()
	_ = bookFields
	// bookDescTitle is the schema descriptor for title field.
	bookDescTitle := bookFields[0].Descriptor()
	// book.DefaultTitle holds the default value on creation for the title field.
	book.DefaultTitle = bookDescTitle.Default.(string)
	// bookDescCreateAt is the schema descriptor for create_at field.
	bookDescCreateAt := bookFields[1].Descriptor()
	// book.DefaultCreateAt holds the default value on creation for the create_at field.
	book.DefaultCreateAt = bookDescCreateAt.Default.(func() time.Time)
	// bookDescUpdatedAt is the schema descriptor for updated_at field.
	bookDescUpdatedAt := bookFields[2].Descriptor()
	// book.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	book.DefaultUpdatedAt = bookDescUpdatedAt.Default.(func() time.Time)
	// book.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	book.UpdateDefaultUpdatedAt = bookDescUpdatedAt.UpdateDefault.(func() time.Time)
	// bookDescSubject is the schema descriptor for subject field.
	bookDescSubject := bookFields[3].Descriptor()
	// book.DefaultSubject holds the default value on creation for the subject field.
	book.DefaultSubject = bookDescSubject.Default.(string)
	unitFields := schema.Unit{}.Fields()
	_ = unitFields
	// unitDescContent is the schema descriptor for content field.
	unitDescContent := unitFields[0].Descriptor()
	// unit.DefaultContent holds the default value on creation for the content field.
	unit.DefaultContent = unitDescContent.Default.(string)
	// unitDescContentName is the schema descriptor for content_name field.
	unitDescContentName := unitFields[1].Descriptor()
	// unit.DefaultContentName holds the default value on creation for the content_name field.
	unit.DefaultContentName = unitDescContentName.Default.(string)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescAge is the schema descriptor for age field.
	userDescAge := userFields[1].Descriptor()
	// user.DefaultAge holds the default value on creation for the age field.
	user.DefaultAge = userDescAge.Default.(func() time.Time)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[2].Descriptor()
	// user.DefaultEmail holds the default value on creation for the email field.
	user.DefaultEmail = userDescEmail.Default.(string)
	// userDescGooglenum is the schema descriptor for googlenum field.
	userDescGooglenum := userFields[3].Descriptor()
	// user.DefaultGooglenum holds the default value on creation for the googlenum field.
	user.DefaultGooglenum = userDescGooglenum.Default.(string)
	// userDescHobby is the schema descriptor for hobby field.
	userDescHobby := userFields[4].Descriptor()
	// user.DefaultHobby holds the default value on creation for the hobby field.
	user.DefaultHobby = userDescHobby.Default.(string)
	// userDescLang is the schema descriptor for lang field.
	userDescLang := userFields[5].Descriptor()
	// user.DefaultLang holds the default value on creation for the lang field.
	user.DefaultLang = userDescLang.Default.(string)
	// userDescGithub is the schema descriptor for github field.
	userDescGithub := userFields[6].Descriptor()
	// user.DefaultGithub holds the default value on creation for the github field.
	user.DefaultGithub = userDescGithub.Default.(string)
	// userDescGitlab is the schema descriptor for gitlab field.
	userDescGitlab := userFields[7].Descriptor()
	// user.DefaultGitlab holds the default value on creation for the gitlab field.
	user.DefaultGitlab = userDescGitlab.Default.(string)
}
