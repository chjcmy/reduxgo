// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/backand/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Age holds the value of the "age" field.
	Age time.Time `json:"age,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Googlenum holds the value of the "googlenum" field.
	Googlenum string `json:"googlenum,omitempty"`
	// Hobby holds the value of the "hobby" field.
	Hobby string `json:"hobby,omitempty"`
	// Lang holds the value of the "lang" field.
	Lang string `json:"lang,omitempty"`
	// Github holds the value of the "github" field.
	Github string `json:"github,omitempty"`
	// Gitlab holds the value of the "gitlab" field.
	Gitlab string `json:"gitlab,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges UserEdges `json:"edges"`
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Writer holds the value of the writer edge.
	Writer []*Book `json:"writer,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// WriterOrErr returns the Writer value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) WriterOrErr() ([]*Book, error) {
	if e.loadedTypes[0] {
		return e.Writer, nil
	}
	return nil, &NotLoadedError{edge: "writer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			values[i] = new(sql.NullInt64)
		case user.FieldName, user.FieldEmail, user.FieldGooglenum, user.FieldHobby, user.FieldLang, user.FieldGithub, user.FieldGitlab:
			values[i] = new(sql.NullString)
		case user.FieldAge:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type User", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case user.FieldAge:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field age", values[i])
			} else if value.Valid {
				u.Age = value.Time
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldGooglenum:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field googlenum", values[i])
			} else if value.Valid {
				u.Googlenum = value.String
			}
		case user.FieldHobby:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hobby", values[i])
			} else if value.Valid {
				u.Hobby = value.String
			}
		case user.FieldLang:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lang", values[i])
			} else if value.Valid {
				u.Lang = value.String
			}
		case user.FieldGithub:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field github", values[i])
			} else if value.Valid {
				u.Github = value.String
			}
		case user.FieldGitlab:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gitlab", values[i])
			} else if value.Valid {
				u.Gitlab = value.String
			}
		}
	}
	return nil
}

// QueryWriter queries the "writer" edge of the User entity.
func (u *User) QueryWriter() *BookQuery {
	return (&UserClient{config: u.config}).QueryWriter(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", name=")
	builder.WriteString(u.Name)
	builder.WriteString(", age=")
	builder.WriteString(u.Age.Format(time.ANSIC))
	builder.WriteString(", email=")
	builder.WriteString(u.Email)
	builder.WriteString(", googlenum=")
	builder.WriteString(u.Googlenum)
	builder.WriteString(", hobby=")
	builder.WriteString(u.Hobby)
	builder.WriteString(", lang=")
	builder.WriteString(u.Lang)
	builder.WriteString(", github=")
	builder.WriteString(u.Github)
	builder.WriteString(", gitlab=")
	builder.WriteString(u.Gitlab)
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
